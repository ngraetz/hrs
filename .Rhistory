# h10 <- st_intersection(this_hud, this_flood10)
# h <- as.data.table(this_hud)
# h[Code %in% h3$Code, flood_zone := 3]
# h[Code %in% h7$Code, flood_zone := 7]
# h[Code %in% h10$Code, flood_zone := 10]
# h[is.na(flood_zone), flood_zone := 0]
# h[, total_ppl := as.numeric(total_ppl)]
# h[total_ppl<0, total_ppl := 0]
# h[, Subsidized_units_available := as.numeric(Subsidized_units_available)]
# h[Subsidized_units_available<0, Subsidized_units_available := 0]
# h[, buildings := 1]
# h <- h[, list(buildings=sum(buildings,na.rm=T), units=sum(Subsidized_units_available,na.rm=T), people=sum(total_ppl,na.rm=T)), by=c('flood_zone')]
# h[, district := c(state_name,substr(d,3,4))]
# write.csv(h, paste0(this_msa_dir,'/table.csv'), row.names=F)
# }
}
## Return table of HUD by flood zone
return(h)
}
get_overlaps <- function(x,y) {
overlaps <- st_intersects(x, y)
overlaps <- unlist(lapply(1:dim(overlaps)[1], function(i) ifelse(length((overlaps[[i]]))==1, TRUE, FALSE)))
# x[overlaps,]
return(x[overlaps,])
}
class(msa)
nyc_msa <- msa[grepl('New York',msa$NAME),]$CBSAFP
atlanta_msa <- msa[grepl('Atlanta',msa$NAME),]$CBSAFP
boston_msa <- msa[grepl('Boston',msa$NAME),]$CBSAFP
pr_msa <- msa[grepl('San Juan',msa$NAME),]$CBSAFP
chicago_msa <- msa[grepl('Chicago',msa$NAME),]$CBSAFP
m <- chicago_msa
msa_name <- msa[msa$CBSAFP==m,]$NAME
message(paste0('Processing ', msa_name, ' (', m, ')...'))
msa_name <- gsub(',','',msa_name)
this_msa_dir <- paste0(master_dir,'/processed_msa/',msa_name)
dir.create(this_msa_dir)
this_msa <- msa[msa$CBSAFP==m,]
all_dists <- get_overlaps(cong_dist, this_msa)
all_dists <- st_crop(all_dists, st_bbox(this_msa))
# ggplot() +
#   geom_sf(data=this_msa, fill=NA, color='black', size=3) +
#   geom_sf(data=all_dists, fill=NA, color='blue')
## Clip flood/HUD to congressional district BOUNDARIES
this_hud <- get_overlaps(hud, this_msa)
this_hud <- st_intersection(this_hud, this_msa)
this_flood10 <- get_overlaps(flood10, this_msa)
this_flood10 <- st_crop(this_flood10, this_msa)
this_flood3 <- get_overlaps(flood3, this_msa)
this_flood3 <- st_crop(this_flood3, this_msa)
this_flood7 <- get_overlaps(flood7, this_msa)
this_flood7 <- st_crop(this_flood7, this_msa)
## Clip counties to congressional district BOX and pull the necessary county-level information
these_counties <- get_overlaps(counties, this_msa)
these_counties <- st_crop(these_counties, this_msa)
these_counties <- as.data.table(these_counties)
these_counties[, fips := paste0(STATEFP,COUNTYFP)]
these_states <- unique(these_counties[, STATEFP])
these_counties <- these_counties[, fips]
## Roads
get_county_roads <- function(c) {
roads <- roads(state=substr(c,1,2), county=substr(c,3,5), class='sf')
return(roads)
}
roads <- do.call(rbind, lapply(these_counties, get_county_roads))
roads <- roads[!is.na(roads$RTTYP),]
roads <- roads[roads$RTTYP!='C', ]
roads <- roads[roads$RTTYP!='M', ]
roads <- st_transform(roads, crs=master_crs)
roads <- st_crop(roads, st_bbox(this_msa))
## Parks
get_county_parks <- function(s) {
parks <- landmarks(class='sf', state=s, type='area')
return(parks)
}
parks <- do.call(rbind, lapply(these_states, get_county_parks))
parks <- parks[grepl('Park|Cmtry', parks$FULLNAME),]
parks <- st_transform(parks, crs=master_crs)
parks <- st_crop(parks, this_msa)
## Water
get_county_water <- function(c) {
water <- area_water(state=substr(c,1,2), county=substr(c,3,5), class='sf')
return(water)
}
water <- do.call(rbind, lapply(these_counties, get_county_water))
water <- st_transform(water, crs=master_crs)
water <- st_crop(water, st_bbox(this_msa))
## Erase water from congressional district
all_dists <- st_erase(all_dists, water)
## Get ACS layers. Only map nonwhite but save all three.
acs_layers <- Reduce(rbind, lapply(these_counties, process_county_acs))
acs_layers <- st_transform(acs_layers, crs=master_crs)
acs_layers <- st_crop(acs_layers, this_msa)
breaks <- c(0,0.30,0.60,0.90)
labels <- c('0','30','60',">90")
indicator_name <- 'Percent\nnon-white'
library(tidycensus)
acs_layers <- Reduce(rbind, lapply(these_counties, process_county_acs))
acs_layers <- st_transform(acs_layers, crs=master_crs)
acs_layers <- st_crop(acs_layers, this_msa)
breaks <- c(0,0.30,0.60,0.90)
labels <- c('0','30','60',">90")
indicator_name <- 'Percent\nnon-white'
shapefile_dir <- paste0(this_msa_dir,'/shapefiles')
dir.create(shapefile_dir)
shapes_to_write <- c('roads','parks','all_dists','this_hud','acs_layers')
if(dim(this_flood10)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood10')
if(dim(this_flood7)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood7')
if(dim(this_flood3)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood3')
for(s in shapes_to_write) {
message(paste0('writing ', s))
shape1 <- as_Spatial(get(s))
writeOGR(obj=shape1, dsn=shapefile_dir, layer=s, driver="ESRI Shapefile", overwrite=T)
}
class(acs_layers)
s <- 'acs_layers'
# shape1 <- as_Spatial(get(s))
shape1 <- as(st_sfc(get(s)), "Spatial")
# shape1 <- as_Spatial(get(s))
shape1 <- as((get(s)), "Spatial")
?as
# shape1 <- as_Spatial(get(s))
shape1 <- as(get(s), "Spatial")
types <- vapply(sf::st_geometry(get(s)), function(x) {
class(x)[2]
}, "")
unique(types)
table(types)
shape1 <- get(s)
types <- vapply(sf::st_geometry(get(s)), function(x) {
class(x)[2]
}, "")
length(types)
dim(shape1)
# shape1 <- as_Spatial(get(s))
# shape1 <- as(get(s), "Spatial")
shape1 <- get(s)
types <- vapply(sf::st_geometry(shape1), function(x) {
class(x)[2]
}, "")
shape1 <- shape1[ !grepl("*GEOMETRYCOLLECTION", types), ]
shape1 <- as_Spatial(shape1)
writeOGR(obj=shape1, dsn=shapefile_dir, layer=s, driver="ESRI Shapefile", overwrite=T)
shapes_to_write
if(dim(this_flood10)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood10')
if(dim(this_flood7)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood7')
if(dim(this_flood3)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood3')
shapes_to_write
m <- pr_msa
msa_name <- msa[msa$CBSAFP==m,]$NAME
message(paste0('Processing ', msa_name, ' (', m, ')...'))
msa_name <- gsub(',','',msa_name)
this_msa_dir <- paste0(master_dir,'/processed_msa/',msa_name)
dir.create(this_msa_dir)
this_msa <- msa[msa$CBSAFP==m,]
all_dists <- get_overlaps(cong_dist, this_msa)
all_dists <- st_crop(all_dists, st_bbox(this_msa))
# ggplot() +
#   geom_sf(data=this_msa, fill=NA, color='black', size=3) +
#   geom_sf(data=all_dists, fill=NA, color='blue')
## Clip flood/HUD to congressional district BOUNDARIES
this_hud <- get_overlaps(hud, this_msa)
this_hud <- st_intersection(this_hud, this_msa)
this_flood10 <- get_overlaps(flood10, this_msa)
this_flood10 <- st_crop(this_flood10, this_msa)
this_flood3 <- get_overlaps(flood3, this_msa)
this_flood3 <- st_crop(this_flood3, this_msa)
this_flood7 <- get_overlaps(flood7, this_msa)
this_flood7 <- st_crop(this_flood7, this_msa)
## Clip counties to congressional district BOX and pull the necessary county-level information
these_counties <- get_overlaps(counties, this_msa)
these_counties <- st_crop(these_counties, this_msa)
these_counties <- as.data.table(these_counties)
these_counties[, fips := paste0(STATEFP,COUNTYFP)]
these_states <- unique(these_counties[, STATEFP])
these_counties <- these_counties[, fips]
dim(these_counties)
these_counties
get_county_roads <- function(c) {
roads <- roads(state=substr(c,1,2), county=substr(c,3,5), class='sf')
return(roads)
}
roads <- do.call(rbind, lapply(these_counties, get_county_roads))
roads <- roads[!is.na(roads$RTTYP),]
roads <- roads[roads$RTTYP!='C', ]
roads <- roads[roads$RTTYP!='M', ]
roads <- st_transform(roads, crs=master_crs)
roads <- st_crop(roads, st_bbox(this_msa))
## Parks
get_county_parks <- function(s) {
parks <- landmarks(class='sf', state=s, type='area')
return(parks)
}
parks <- do.call(rbind, lapply(these_states, get_county_parks))
parks <- parks[grepl('Park|Cmtry', parks$FULLNAME),]
parks <- st_transform(parks, crs=master_crs)
parks <- st_crop(parks, this_msa)
## Water
get_county_water <- function(c) {
water <- area_water(state=substr(c,1,2), county=substr(c,3,5), class='sf')
return(water)
}
water <- do.call(rbind, lapply(these_counties, get_county_water))
water <- st_transform(water, crs=master_crs)
water <- st_crop(water, st_bbox(this_msa))
## Erase water from congressional district
all_dists <- st_erase(all_dists, water)
## Get ACS layers. Only map nonwhite but save all three.
acs_layers <- Reduce(rbind, lapply(these_counties, process_county_acs))
acs_layers <- st_transform(acs_layers, crs=master_crs)
acs_layers <- st_crop(acs_layers, this_msa)
breaks <- c(0,0.30,0.60,0.90)
labels <- c('0','30','60',">90")
indicator_name <- 'Percent\nnon-white'
shapefile_dir <- paste0(this_msa_dir,'/shapefiles')
dir.create(shapefile_dir)
shapes_to_write <- c('roads','parks','all_dists','this_hud','acs_layers')
if(dim(this_flood10)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood10')
if(dim(this_flood7)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood7')
if(dim(this_flood3)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood3')
for(s in shapes_to_write) {
message(paste0('writing ', s))
# shape1 <- as_Spatial(get(s))
# shape1 <- as(get(s), "Spatial")
shape1 <- get(s)
types <- vapply(sf::st_geometry(shape1), function(x) {
class(x)[2]
}, "")
shape1 <- shape1[ !grepl("*GEOMETRYCOLLECTION", types), ]
shape1 <- as_Spatial(shape1)
writeOGR(obj=shape1, dsn=shapefile_dir, layer=s, driver="ESRI Shapefile", overwrite=T)
}
#
s <- 'parks'
# shape1 <- as_Spatial(get(s))
# shape1 <- as(get(s), "Spatial")
shape1 <- get(s)
types <- vapply(sf::st_geometry(shape1), function(x) {
class(x)[2]
}, "")
shape1 <- shape1[ !grepl("*GEOMETRYCOLLECTION", types), ]
shape1 <- as_Spatial(shape1)
class(shape1)
tables(types)
types
parks
dim(get(s))
dim(get(s))[1]
for(s in shapes_to_write) {
if(dim(get(s))[1]!=0) {
message(paste0('writing ', s))
# shape1 <- as_Spatial(get(s))
# shape1 <- as(get(s), "Spatial")
shape1 <- get(s)
types <- vapply(sf::st_geometry(shape1), function(x) {
class(x)[2]
}, "")
shape1 <- shape1[ !grepl("*GEOMETRYCOLLECTION", types), ]
shape1 <- as_Spatial(shape1)
writeOGR(obj=shape1, dsn=shapefile_dir, layer=s, driver="ESRI Shapefile", overwrite=T)
}
}
la_msa <- msa[grepl('Los Angeles',msa$NAME),]$CBSAFP
la_msa
seattle_msa <- msa[grepl('Seattle',msa$NAME),]$CBSAFP
## Still need: Chicago, San Juan, LA
all_tables <- lapply(c(la_msa,seattle_msa), process_msa)
# ny_footprints <- st_read("C:/Users/ngraetz/Downloads/NewYork/NewYork.geojson")
process_msa <- function(m) {
msa_name <- msa[msa$CBSAFP==m,]$NAME
message(paste0('Processing ', msa_name, ' (', m, ')...'))
msa_name <- gsub(',','',msa_name)
this_msa_dir <- paste0(master_dir,'/processed_msa/',msa_name)
dir.create(this_msa_dir)
this_msa <- msa[msa$CBSAFP==m,]
all_dists <- get_overlaps(cong_dist, this_msa)
all_dists <- st_crop(all_dists, st_bbox(this_msa))
# ggplot() +
#   geom_sf(data=this_msa, fill=NA, color='black', size=3) +
#   geom_sf(data=all_dists, fill=NA, color='blue')
## Clip flood/HUD to congressional district BOUNDARIES
this_hud <- get_overlaps(hud, this_msa)
this_hud <- st_intersection(this_hud, this_msa)
this_flood10 <- get_overlaps(flood10, this_msa)
this_flood10 <- st_crop(this_flood10, this_msa)
if(dim(this_hud)[1] == 0) {
message('NO PUBLIC HOUSING')
h <- NULL
}
if(dim(this_hud)[1] != 0) {
# if(dim(this_flood10)[1] == 0) {
#   h <- as.data.table(this_hud)
#   h[, flood_zone := 0]
#   h[, total_ppl := as.numeric(total_ppl)]
#   h[total_ppl<0, total_ppl := 0]
#   h[, Subsidized_units_available := as.numeric(Subsidized_units_available)]
#   h[Subsidized_units_available<0, Subsidized_units_available := 0]
#   h[, buildings := 1]
#   h <- h[, list(buildings=sum(buildings,na.rm=T), units=sum(Subsidized_units_available,na.rm=T), people=sum(total_ppl,na.rm=T)), by=c('flood_zone')]
#   h[, msa := msa_name]
#   write.csv(h, paste0(this_msa_dir,'/table.csv'), row.names=F)
#   message('NO HOUSING IN FLOOD ZONES')
# }
# if(dim(this_flood10)[1] != 0) {
this_flood3 <- get_overlaps(flood3, this_msa)
this_flood3 <- st_crop(this_flood3, this_msa)
this_flood7 <- get_overlaps(flood7, this_msa)
this_flood7 <- st_crop(this_flood7, this_msa)
## Clip counties to congressional district BOX and pull the necessary county-level information
these_counties <- get_overlaps(counties, this_msa)
these_counties <- st_crop(these_counties, this_msa)
these_counties <- as.data.table(these_counties)
these_counties[, fips := paste0(STATEFP,COUNTYFP)]
these_states <- unique(these_counties[, STATEFP])
these_counties <- these_counties[, fips]
## Roads
get_county_roads <- function(c) {
roads <- roads(state=substr(c,1,2), county=substr(c,3,5), class='sf')
return(roads)
}
roads <- do.call(rbind, lapply(these_counties, get_county_roads))
roads <- roads[!is.na(roads$RTTYP),]
roads <- roads[roads$RTTYP!='C', ]
roads <- roads[roads$RTTYP!='M', ]
roads <- st_transform(roads, crs=master_crs)
roads <- st_crop(roads, st_bbox(this_msa))
## Parks
get_county_parks <- function(s) {
parks <- landmarks(class='sf', state=s, type='area')
return(parks)
}
parks <- do.call(rbind, lapply(these_states, get_county_parks))
parks <- parks[grepl('Park|Cmtry', parks$FULLNAME),]
parks <- st_transform(parks, crs=master_crs)
parks <- st_crop(parks, this_msa)
## Water
get_county_water <- function(c) {
water <- area_water(state=substr(c,1,2), county=substr(c,3,5), class='sf')
return(water)
}
water <- do.call(rbind, lapply(these_counties, get_county_water))
water <- st_transform(water, crs=master_crs)
water <- st_crop(water, st_bbox(this_msa))
## Erase water from congressional district
all_dists <- st_erase(all_dists, water)
## Get ACS layers. Only map nonwhite but save all three.
acs_layers <- Reduce(rbind, lapply(these_counties, process_county_acs))
acs_layers <- st_transform(acs_layers, crs=master_crs)
acs_layers <- st_crop(acs_layers, this_msa)
breaks <- c(0,0.30,0.60,0.90)
labels <- c('0','30','60',">90")
indicator_name <- 'Percent\nnon-white'
## Map
# ggplot() + geom_sf(data=all_dists,fill=NA,color='black')
# msa_map <- ggplot(data=this_hud) +
#   map_theme +
#   geom_sf(data=this_msa,
#           fill=NA,
#           color='black',
#           lwd=0.3,
#           inherit.aes = FALSE) +
#   geom_sf(data=all_dists,
#           alpha=1,
#           fill='#e6e7e8',
#           color='#a6a6a6',
#           lwd=0.2,
#           inherit.aes = FALSE) +
#   geom_sf(data=roads,
#           alpha=1,
#           color='#808080',
#           lwd=0.5,
#           inherit.aes = FALSE) +
#   geom_sf(data=parks,
#           alpha=1,
#           fill='#d6ddd7',
#           color=NA,
#           lwd=0,
#           inherit.aes = FALSE) +
#   geom_sf(data=acs_layers,
#           aes(fill=nonwhite),
#           alpha=0.7,
#           color=NA,
#           lwd=0,
#           inherit.aes = FALSE) +
#   geom_sf(data=this_flood10,
#           fill='#6baed6',
#           alpha=0.3,
#           lwd=0,
#           inherit.aes = FALSE) +
#   geom_sf(data=this_flood7,
#           fill='#6baed6',
#           alpha=0.3,
#           lwd=0,
#           inherit.aes = FALSE) +
#   geom_sf(data=this_flood3,
#           fill='#6baed6',
#           alpha=0.3,
#           lwd=0,
#           inherit.aes = FALSE) +
#   geom_sf(data=this_hud,
#           fill='#000000',
#           color='black',
#           size=2,
#           inherit.aes = FALSE) +
#   scale_fill_gradientn(name=indicator_name,colors = c('#ffebd6','#f5cbae','#eba988','#eba988','#d65d45','#d65d45'), breaks=breaks, labels=labels, limits=c(min(breaks),max(breaks))) +
#   scale_x_continuous(limits = st_bbox(this_msa)[c('xmin','xmax')], expand = c(0, 0)) +
#   scale_y_continuous(limits = st_bbox(this_msa)[c('ymin','ymax')], expand = c(0, 0)) +
#   coord_sf(datum = NA)
# msa_map$layers <- c(geom_rect(xmin=st_bbox(this_msa)['xmin'],
#                                xmax=st_bbox(this_msa)['xmax'],
#                                ymin=st_bbox(this_msa)['ymin'],
#                                ymax=st_bbox(this_msa)['ymax'],
#                                fill='#6baed6',color=NA,alpha=0.9),
#                      msa_map$layers)
#
# ## Save all processed layers
# # message('Saving map')
# # png(paste0(this_msa_dir,'/map.png'),height=8.5,width=11, units='in',res=300)
# # print(msa_map)
# # dev.off()
#
## Save shapefiles
shapefile_dir <- paste0(this_msa_dir,'/shapefiles')
dir.create(shapefile_dir)
shapes_to_write <- c('roads','parks','all_dists','this_hud','acs_layers')
if(dim(this_flood10)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood10')
if(dim(this_flood7)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood7')
if(dim(this_flood3)[1] != 0) shapes_to_write <- c(shapes_to_write, 'this_flood3')
for(s in shapes_to_write) {
if(dim(get(s))[1]!=0) {
message(paste0('writing ', s))
# shape1 <- as_Spatial(get(s))
# shape1 <- as(get(s), "Spatial")
shape1 <- get(s)
types <- vapply(sf::st_geometry(shape1), function(x) {
class(x)[2]
}, "")
shape1 <- shape1[ !grepl("*GEOMETRYCOLLECTION", types), ]
shape1 <- as_Spatial(shape1)
writeOGR(obj=shape1, dsn=shapefile_dir, layer=s, driver="ESRI Shapefile", overwrite=T)
}
}
#
# ## Make map
# vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y, clip = "off")
# gLegend<-function(a.plot){
#   if ("ggplot" %in% class(a.plot)) {
#     tmp <- ggplot_gtable(ggplot_build(a.plot))
#   } else if ("grob" %in% class(a.plot)) {
#     tmp <- .gplot
#   }
#   leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
#   legend <- tmp$grobs[[leg]]
#   return(legend)
# }
# watercols <- c('#6baed6','#6baed6','#6baed6')
# watertest <- data.table(water=c('3 ft rise','7 ft rise','10 ft rise'),
#                         indx=c(1,2,3), indy=c(1,2,3))
# watertest[, water := factor(water, levels=c('3 ft rise','7 ft rise','10 ft rise'))]
# watergg <- ggplot() + geom_point(data=watertest, aes(x=indx, y=indy, fill=water), shape=21) +
#   scale_fill_manual(values=watercols, name='') +
#   guides(fill = guide_legend(override.aes = list(size=10,alpha=c(0.9,0.6,0.3)))) + map_theme +
#   theme(legend.position="top", legend.direction="horizontal",legend.background = element_rect(color = NA),legend.key=element_blank())
# waterlegend <- gLegend(watergg)
# ## Make custom NYCHA legend
# nychatest <- data.table(water=c('Public Housing'),
#                         indx=c(1), indy=c(1))
# nychagg <- ggplot() + geom_point(data=nychatest, aes(x=indx, y=indy, fill=water), shape=21) +
#   scale_fill_manual(values='black', name='') +
#   guides(fill = guide_legend(override.aes = list(size=10))) + map_theme +
#   theme(legend.position="top", legend.direction="horizontal",legend.background = element_rect(color = NA),legend.key=element_blank())
# nychalegend <- gLegend(nychagg)
#
# p.legend1 <- gLegend(msa_map)
# p.legend1$vp <- viewport(layout.pos.row = 11, layout.pos.col = 5, just='left')
# p.legend2 <- waterlegend
# p.legend2$vp <- viewport(layout.pos.row = 11, layout.pos.col = 2, just='left')
# p.legend3 <- nychalegend
# p.legend3$vp <- viewport(layout.pos.row = 11, layout.pos.col = 8, just='left')
#
# png(paste0(this_msa_dir,'/map.png'),height=8.5,width=11, units='in',res=600)
# grid.newpage()
# pushViewport(viewport(layout = grid.layout(11, 9)))
# grid.draw(p.legend1)
# grid.draw(p.legend2)
# grid.draw(p.legend3)
# print(msa_map + theme(legend.position="none"), vp = vplayout(1:10, 1:9))
# dev.off()
## Make HUD aggregates
# h3 <- st_intersection(this_hud, this_flood3)
# h7 <- st_intersection(this_hud, this_flood7)
# h10 <- st_intersection(this_hud, this_flood10)
# h <- as.data.table(this_hud)
# h[Code %in% h3$Code, flood_zone := 3]
# h[Code %in% h7$Code, flood_zone := 7]
# h[Code %in% h10$Code, flood_zone := 10]
# h[is.na(flood_zone), flood_zone := 0]
# h[, total_ppl := as.numeric(total_ppl)]
# h[total_ppl<0, total_ppl := 0]
# h[, Subsidized_units_available := as.numeric(Subsidized_units_available)]
# h[Subsidized_units_available<0, Subsidized_units_available := 0]
# h[, buildings := 1]
# h <- h[, list(buildings=sum(buildings,na.rm=T), units=sum(Subsidized_units_available,na.rm=T), people=sum(total_ppl,na.rm=T)), by=c('flood_zone')]
# h[, district := c(state_name,substr(d,3,4))]
# write.csv(h, paste0(this_msa_dir,'/table.csv'), row.names=F)
# }
}
## Return table of HUD by flood zone
return(NULL)
}
## Still need: Chicago, San Juan, LA
all_tables <- lapply(c(seattle_msa), process_msa)

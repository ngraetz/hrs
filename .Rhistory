hrs[blackhrsGform==1, race := 'black']
hrs[hispanichrsGform==1, race := 'hispanic']
hrs[otherhrsGform==1, race := 'other']
hrs <- hrs[age >= 50, ]
hrs[, age_group := cut(age, seq(50,95,5))]
hrs[, age_group := as.numeric(substr(age, 2, 3))]
hrs[, female := femalehrsGform]
hrs[, grep('hrsGform', names(hrs), value=T) := NULL]
hrs[, variable := NULL]
## Drop outliers
for(v in c('wealth','income')) {
hrs <- hrs[get(v) < quantile(hrs[, get(v)], c(0.99)), ]
hrs <- hrs[get(v) > quantile(hrs[, get(v)], c(0.01)), ]
}
hrs[, log_income := log(income)]
## Multiple imputation for missing data.
## For some reason, id or pweight messes up MI. It is definitely because it introduces some extreme imbalance (i.e. trying to invert an non-invertible matrix somewhere), but I can't think of why...
## I guess it just over-identifies everythink somewhere so there is zero variation.
sapply(hrs, function(x) sum(is.na(x)))
mi_list <- mice(hrs[, c('cohort','age','cognitive','race','female','wealth','income','edu_years')], m=5)
imp_geo <- mice::complete(mi_list)
imp_geo <- as.data.table(imp_geo)
sapply(imp_geo, function(x) sum(is.na(x)))
imp_hrs <- as.data.table(imp_geo)
hrs[, imp_cognitive := imp_hrs[, cognitive]]
mi_list <- mice(hrs[, c('cohort','age','cognitive','race','female','edu_years')], m=5)
imp_geo <- mice::complete(mi_list)
imp_geo <- as.data.table(imp_geo)
sapply(imp_geo, function(x) sum(is.na(x)))
imp_hrs <- as.data.table(imp_geo)
hrs[, imp_cognitive := imp_hrs[, cognitive]]
model_trajectories <- function(race_option, outcome_var, numeric_vars, factor_vars, survey_weight = FALSE) {
## Subset data to race and respondents with at least 2 responses on outcome.
model_hrs <- hrs[race==race_option & !is.na(cognitive), ]
id_nums <- model_hrs[, .N , by = id]
dim(id_nums[N == 1, ])
model_hrs <- model_hrs[id %in% id_nums[N > 1, id], ]
model_hrs[, id_factor := as.factor(id)]
grand_n <- dim(model_hrs)[1]
ind_n <- length(unique(model_hrs[, id]))
## Rescale all variables to mean/sd=0/1. Keep track of means/sds to transform back after predicting.
scale_vars <- c(outcome_var, numeric_vars)
means <- model_hrs[, lapply(.SD, mean, na.rm=TRUE), .SDcols=scale_vars]
means <- melt(means, measure.vars=scale_vars)
sds <- model_hrs[, lapply(.SD, sd, na.rm=TRUE), .SDcols=scale_vars]
sds <- melt(sds, measure.vars=scale_vars)
setnames(sds, 'value', 'sd')
setnames(means, 'value', 'mean')
scales <- merge(means,sds)
model_hrs <- as.data.table(model_hrs %>% mutate_at(funs(scale(.) %>% as.vector), .vars=scale_vars)) # Subtract mean, divide by SD.
## If we want age polynomials, we need to calculate orthogonal polynomials. Because our ages are relatively high, age and age^2
## are basically perfectly correlated so the model can't converge.
age_polys <- poly(model_hrs[, age], degree = 2)
model_hrs[, age_poly_1 := age_polys[,1]]
model_hrs[, age_poly_2 := age_polys[,2]]
## Fit model, pull out random effects to calculate individual trajectories. Coef() gives random + fixed effects.
model_formula <- as.formula(paste0(outcome_var, ' ~ ', paste(c(factor_vars, numeric_vars), collapse=' + '), ' + poly(age,2) + (poly(age,2)|id_factor)'))
if(survey_weight) {
model_hrs <- model_hrs[!is.na(pweight) & pweight > 0, ]
model1 <- lmer(model_formula, weights=pweight, data=model_hrs)
}
if(!survey_weight) {
model1 <- lmer(model_formula, data=model_hrs)
}
res <- coef(model1)$id_factor
ids <- rownames(res)
res <- as.data.table(res)
res[, id_factor := ids]
setnames(res, c('(Intercept)','poly(age, 2)1','poly(age, 2)2'), c('age_int','age_slope1','age_slope2'))
res <- res[, c('id_factor','age_int','age_slope1','age_slope2')]
plot_data <- merge(model_hrs, res, by='id_factor')
plot_data[, growth_curve := age_int + (age_poly_1 * age_slope1) + (age_poly_2 * age_slope2)]
plot_data[, growth_curve := growth_curve * scales[variable=='cognitive', sd] + scales[variable=='cognitive', mean]]
# setnames(res, c('(Intercept)','age'), c('age_int','age_slope'))
# res <- res[, c('id_factor','age_int','age_slope')]
# plot_data <- merge(model_hrs, res, by='id_factor')
# plot_data[, growth_curve := age_int + (age * age_slope)]
# plot_data[, growth_curve := growth_curve * scales[variable=='cognitive', sd] + scales[variable=='cognitive', mean]]
# plot_data[, age := age * scales[variable=='age', sd] + scales[variable=='age', mean]]
## Calculate population average trajectory.
# mean_growth <- data.table(age = seq(min(model_hrs$age), max(model_hrs$age), .01),
#                           mean_int = mean(res$age_int),
#                           mean_slope = mean(res$age_slope),
#                           race = race_option)
# mean_growth[, growth_curve := mean_int + (age * mean_slope)]
# mean_growth[, growth_curve := growth_curve * scales[variable=='cognitive', sd] + scales[variable=='cognitive', mean]]
# mean_growth[, age := age * scales[variable=='age', sd] + scales[variable=='age', mean]]
mean_growth <- unique(plot_data[, c('age','age_poly_1','age_poly_2')])
mean_growth[, age_int := mean(res$age_int)]
mean_growth[, age_slope1 := mean(res$age_slope1)]
mean_growth[, age_slope2 := mean(res$age_slope2)]
mean_growth[, growth_curve := age_int + (age_poly_1 * age_slope1) + (age_poly_2 * age_slope2)]
mean_growth[, growth_curve := growth_curve * scales[variable=='cognitive', sd] + scales[variable=='cognitive', mean]]
mean_growth[, race := race_option]
return(list(model1, plot_data, mean_growth))
}
outcome_var <- 'imp_cognitive'
numeric_vars <- c('cohort','edu_years','wealth','log_income') ## Include outcome; will be rescaled for modelling.
factor_vars <- c('female')
all_models <- lapply(c('white','black'), model_trajectories, outcome_var, numeric_vars, factor_vars, survey_weight = FALSE)
## Plot underlying age trajectories of the outcome (i.e. predictions based only on random age intercepts/slopes, conditional on the rest of the model).
pdf('output/imputed_race_trajectories_ses.pdf', height=8, width=12)
plot_data <- rbind(all_models[[1]][[2]], all_models[[2]][[2]])
white_ind_n <- length(unique(plot_data[race=='white', id]))
white_grand_n <- dim(plot_data[race=='white',])[1]
black_grand_n <- dim(plot_data[race=='black',])[1]
black_ind_n <- length(unique(plot_data[race=='black', id]))
mean_growth <- rbind(all_models[[1]][[3]], all_models[[2]][[3]])
ggplot() +
geom_line(data = plot_data,
aes(x = age,
y = growth_curve,
group = id_factor),
alpha = 0.1) +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve),
color = 'red',
size = 3) +
xlim(c(50,95)) +
ylim(c(0,27)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')')) +
theme_minimal() +
facet_wrap(~race)
ggplot() +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve,
color = race),
size = 3) +
xlim(c(50,95)) +
ylim(c(0,20)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')'),
color = 'Race') +
theme_minimal()
dev.off()
model_trajectories <- function(race_option, outcome_var, numeric_vars, factor_vars, survey_weight = FALSE) {
## Subset data to race and respondents with at least 2 responses on outcome.
model_hrs <- hrs[race==race_option & !is.na(get(outcome_var)), ]
id_nums <- model_hrs[, .N , by = id]
dim(id_nums[N == 1, ])
model_hrs <- model_hrs[id %in% id_nums[N > 1, id], ]
model_hrs[, id_factor := as.factor(id)]
## Rescale all variables to mean/sd=0/1. Keep track of means/sds to transform back after predicting.
scale_vars <- c(outcome_var, numeric_vars)
means <- model_hrs[, lapply(.SD, mean, na.rm=TRUE), .SDcols=scale_vars]
means <- melt(means, measure.vars=scale_vars)
sds <- model_hrs[, lapply(.SD, sd, na.rm=TRUE), .SDcols=scale_vars]
sds <- melt(sds, measure.vars=scale_vars)
setnames(sds, 'value', 'sd')
setnames(means, 'value', 'mean')
scales <- merge(means,sds)
model_hrs <- as.data.table(model_hrs %>% mutate_at(funs(scale(.) %>% as.vector), .vars=scale_vars)) # Subtract mean, divide by SD.
## If we want age polynomials, we need to calculate orthogonal polynomials. Because our ages are relatively high, age and age^2
## are basically perfectly correlated so the model can't converge.
age_polys <- poly(model_hrs[, age], degree = 2)
model_hrs[, age_poly_1 := age_polys[,1]]
model_hrs[, age_poly_2 := age_polys[,2]]
## Fit model, pull out random effects to calculate individual trajectories. Coef() gives random + fixed effects.
model_formula <- as.formula(paste0(outcome_var, ' ~ ', paste(c(factor_vars, numeric_vars), collapse=' + '), ' + poly(age,2) + (poly(age,2)|id_factor)'))
if(survey_weight) {
model_hrs <- model_hrs[!is.na(pweight) & pweight > 0, ]
model1 <- lmer(model_formula, weights=pweight, data=model_hrs)
}
if(!survey_weight) {
model1 <- lmer(model_formula, data=model_hrs)
}
res <- coef(model1)$id_factor
ids <- rownames(res)
res <- as.data.table(res)
res[, id_factor := ids]
setnames(res, c('(Intercept)','poly(age, 2)1','poly(age, 2)2'), c('age_int','age_slope1','age_slope2'))
res <- res[, c('id_factor','age_int','age_slope1','age_slope2')]
plot_data <- merge(model_hrs, res, by='id_factor')
plot_data[, growth_curve := age_int + (age_poly_1 * age_slope1) + (age_poly_2 * age_slope2)]
plot_data[, growth_curve := growth_curve * scales[variable==outcome_var, sd] + scales[variable==outcome_var, mean]]
# setnames(res, c('(Intercept)','age'), c('age_int','age_slope'))
# res <- res[, c('id_factor','age_int','age_slope')]
# plot_data <- merge(model_hrs, res, by='id_factor')
# plot_data[, growth_curve := age_int + (age * age_slope)]
# plot_data[, growth_curve := growth_curve * scales[variable=='cognitive', sd] + scales[variable=='cognitive', mean]]
# plot_data[, age := age * scales[variable=='age', sd] + scales[variable=='age', mean]]
## Calculate population average trajectory.
# mean_growth <- data.table(age = seq(min(model_hrs$age), max(model_hrs$age), .01),
#                           mean_int = mean(res$age_int),
#                           mean_slope = mean(res$age_slope),
#                           race = race_option)
# mean_growth[, growth_curve := mean_int + (age * mean_slope)]
# mean_growth[, growth_curve := growth_curve * scales[variable=='cognitive', sd] + scales[variable=='cognitive', mean]]
# mean_growth[, age := age * scales[variable=='age', sd] + scales[variable=='age', mean]]
mean_growth <- unique(plot_data[, c('age','age_poly_1','age_poly_2')])
mean_growth[, age_int := mean(res$age_int)]
mean_growth[, age_slope1 := mean(res$age_slope1)]
mean_growth[, age_slope2 := mean(res$age_slope2)]
mean_growth[, growth_curve := age_int + (age_poly_1 * age_slope1) + (age_poly_2 * age_slope2)]
mean_growth[, growth_curve := growth_curve * scales[variable==outcome_var, sd] + scales[variable==outcome_var, mean]]
mean_growth[, race := race_option]
return(list(model1, plot_data, mean_growth))
}
outcome_var <- 'imp_cognitive'
numeric_vars <- c('cohort','edu_years','wealth','log_income') ## Include outcome; will be rescaled for modelling.
factor_vars <- c('female')
all_models <- lapply(c('white','black'), model_trajectories, outcome_var, numeric_vars, factor_vars, survey_weight = FALSE)
## Plot underlying age trajectories of the outcome (i.e. predictions based only on random age intercepts/slopes, conditional on the rest of the model).
pdf('output/imputed_race_trajectories_ses.pdf', height=8, width=12)
plot_data <- rbind(all_models[[1]][[2]], all_models[[2]][[2]])
white_ind_n <- length(unique(plot_data[race=='white', id]))
white_grand_n <- dim(plot_data[race=='white',])[1]
black_grand_n <- dim(plot_data[race=='black',])[1]
black_ind_n <- length(unique(plot_data[race=='black', id]))
mean_growth <- rbind(all_models[[1]][[3]], all_models[[2]][[3]])
ggplot() +
geom_line(data = plot_data,
aes(x = age,
y = growth_curve,
group = id_factor),
alpha = 0.1) +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve),
color = 'red',
size = 3) +
xlim(c(50,95)) +
ylim(c(0,27)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')')) +
theme_minimal() +
facet_wrap(~race)
ggplot() +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve,
color = race),
size = 3) +
xlim(c(50,95)) +
ylim(c(0,20)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')'),
color = 'Race') +
theme_minimal()
dev.off()
outcome_var <- 'imp_cognitive'
weight <- TRUE
ses <- TRUE
if(ses) numeric_vars <- c('cohort','edu_years','wealth','log_income') ## Include outcome; will be rescaled for modelling.
if(!ses) numeric_vars <- c('cohort') ## Include outcome; will be rescaled for modelling.
factor_vars <- c('female')
all_models <- lapply(c('white','black'), model_trajectories, outcome_var, numeric_vars, factor_vars, survey_weight = weight)
## Plot underlying age trajectories of the outcome (i.e. predictions based only on random age intercepts/slopes, conditional on the rest of the model).
pdf(paste0('output/', outcome_var, '_ses', ses ,'_weight', weight, '.pdf'), height=8, width=12)
plot_data <- rbind(all_models[[1]][[2]], all_models[[2]][[2]])
white_ind_n <- length(unique(plot_data[race=='white', id]))
white_grand_n <- dim(plot_data[race=='white',])[1]
black_grand_n <- dim(plot_data[race=='black',])[1]
black_ind_n <- length(unique(plot_data[race=='black', id]))
mean_growth <- rbind(all_models[[1]][[3]], all_models[[2]][[3]])
ggplot() +
geom_line(data = plot_data,
aes(x = age,
y = growth_curve,
group = id_factor),
alpha = 0.1) +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve),
color = 'red',
size = 3) +
xlim(c(50,95)) +
ylim(c(0,27)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')')) +
theme_minimal() +
facet_wrap(~race)
ggplot() +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve,
color = race),
size = 3) +
xlim(c(50,95)) +
ylim(c(0,20)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')'),
color = 'Race') +
theme_minimal()
dev.off()
hist(hrs$imp_cognitive)
survey_weight <- TRUE
model_hrs <- hrs[race==race_option & !is.na(get(outcome_var)), ]
id_nums <- model_hrs[, .N , by = id]
dim(id_nums[N == 1, ])
model_hrs <- model_hrs[id %in% id_nums[N > 1, id], ]
model_hrs[, id_factor := as.factor(id)]
## Rescale all variables to mean/sd=0/1. Keep track of means/sds to transform back after predicting.
scale_vars <- c(outcome_var, numeric_vars)
means <- model_hrs[, lapply(.SD, mean, na.rm=TRUE), .SDcols=scale_vars]
means <- melt(means, measure.vars=scale_vars)
sds <- model_hrs[, lapply(.SD, sd, na.rm=TRUE), .SDcols=scale_vars]
sds <- melt(sds, measure.vars=scale_vars)
setnames(sds, 'value', 'sd')
setnames(means, 'value', 'mean')
scales <- merge(means,sds)
model_hrs <- as.data.table(model_hrs %>% mutate_at(funs(scale(.) %>% as.vector), .vars=scale_vars)) # Subtract mean, divide by SD.
## If we want age polynomials, we need to calculate orthogonal polynomials. Because our ages are relatively high, age and age^2
## are basically perfectly correlated so the model can't converge.
age_polys <- poly(model_hrs[, age], degree = 2)
model_hrs[, age_poly_1 := age_polys[,1]]
model_hrs[, age_poly_2 := age_polys[,2]]
head(model_hrs)
## Fit model, pull out random effects to calculate individual trajectories. Coef() gives random + fixed effects.
model_formula <- as.formula(paste0(outcome_var, ' ~ ', paste(c(factor_vars, numeric_vars), collapse=' + '), ' + poly(age,2) + (poly(age,2)|id_factor)'))
model_formula
summary(model_hrs$pweight)
hist(model_hrs$pweight)
model_hrs <- model_hrs[!is.na(pweight) & pweight > 0, ]
model_hrs[, pweight := pweight / 10000]
model1 <- lmer(model_formula, weights=pweight, data=model_hrs)
hist(model_hrs$pweight)
model_formula
cor(model_hrs[, c(outcome_var, numeric_vars)])
cor(model_hrs[, c(outcome_var, numeric_vars), with=F])
hist(edu_years)
hist(model_hrs$edu_years)
summary(model_hrs$edu_years)
cor(model_hrs[, c(outcome_var, numeric_vars, 'age_poly_1', 'age_poly_2'), with=F])
summary(model1)
model_trajectories <- function(race_option, outcome_var, numeric_vars, factor_vars, survey_weight = FALSE) {
## Subset data to race and respondents with at least 2 responses on outcome.
model_hrs <- hrs[race==race_option & !is.na(get(outcome_var)), ]
id_nums <- model_hrs[, .N , by = id]
dim(id_nums[N == 1, ])
model_hrs <- model_hrs[id %in% id_nums[N > 1, id], ]
model_hrs[, id_factor := as.factor(id)]
## Rescale all variables to mean/sd=0/1. Keep track of means/sds to transform back after predicting.
scale_vars <- c(outcome_var, numeric_vars)
means <- model_hrs[, lapply(.SD, mean, na.rm=TRUE), .SDcols=scale_vars]
means <- melt(means, measure.vars=scale_vars)
sds <- model_hrs[, lapply(.SD, sd, na.rm=TRUE), .SDcols=scale_vars]
sds <- melt(sds, measure.vars=scale_vars)
setnames(sds, 'value', 'sd')
setnames(means, 'value', 'mean')
scales <- merge(means,sds)
model_hrs <- as.data.table(model_hrs %>% mutate_at(funs(scale(.) %>% as.vector), .vars=scale_vars)) # Subtract mean, divide by SD.
## If we want age polynomials, we need to calculate orthogonal polynomials. Because our ages are relatively high, age and age^2
## are basically perfectly correlated so the model can't converge.
age_polys <- poly(model_hrs[, age], degree = 2)
model_hrs[, age_poly_1 := age_polys[,1]]
model_hrs[, age_poly_2 := age_polys[,2]]
## Fit model, pull out random effects to calculate individual trajectories. Coef() gives random + fixed effects.
model_formula <- as.formula(paste0(outcome_var, ' ~ ', paste(c(factor_vars, numeric_vars), collapse=' + '), ' + poly(age,2) + (poly(age,2)|id_factor)'))
if(survey_weight) {
model_hrs <- model_hrs[!is.na(pweight) & pweight > 0, ]
model_hrs[, pweight := pweight / 10000]
model1 <- lmer(model_formula, weights=pweight, data=model_hrs)
}
if(!survey_weight) {
model1 <- lmer(model_formula, data=model_hrs)
}
res <- coef(model1)$id_factor
ids <- rownames(res)
res <- as.data.table(res)
res[, id_factor := ids]
setnames(res, c('(Intercept)','poly(age, 2)1','poly(age, 2)2'), c('age_int','age_slope1','age_slope2'))
res <- res[, c('id_factor','age_int','age_slope1','age_slope2')]
plot_data <- merge(model_hrs, res, by='id_factor')
plot_data[, growth_curve := age_int + (age_poly_1 * age_slope1) + (age_poly_2 * age_slope2)]
plot_data[, growth_curve := growth_curve * scales[variable==outcome_var, sd] + scales[variable==outcome_var, mean]]
# setnames(res, c('(Intercept)','age'), c('age_int','age_slope'))
# res <- res[, c('id_factor','age_int','age_slope')]
# plot_data <- merge(model_hrs, res, by='id_factor')
# plot_data[, growth_curve := age_int + (age * age_slope)]
# plot_data[, growth_curve := growth_curve * scales[variable=='cognitive', sd] + scales[variable=='cognitive', mean]]
# plot_data[, age := age * scales[variable=='age', sd] + scales[variable=='age', mean]]
## Calculate population average trajectory.
# mean_growth <- data.table(age = seq(min(model_hrs$age), max(model_hrs$age), .01),
#                           mean_int = mean(res$age_int),
#                           mean_slope = mean(res$age_slope),
#                           race = race_option)
# mean_growth[, growth_curve := mean_int + (age * mean_slope)]
# mean_growth[, growth_curve := growth_curve * scales[variable=='cognitive', sd] + scales[variable=='cognitive', mean]]
# mean_growth[, age := age * scales[variable=='age', sd] + scales[variable=='age', mean]]
mean_growth <- unique(plot_data[, c('age','age_poly_1','age_poly_2')])
mean_growth[, age_int := mean(res$age_int)]
mean_growth[, age_slope1 := mean(res$age_slope1)]
mean_growth[, age_slope2 := mean(res$age_slope2)]
mean_growth[, growth_curve := age_int + (age_poly_1 * age_slope1) + (age_poly_2 * age_slope2)]
mean_growth[, growth_curve := growth_curve * scales[variable==outcome_var, sd] + scales[variable==outcome_var, mean]]
mean_growth[, race := race_option]
return(list(model1, plot_data, mean_growth))
}
outcome_var <- 'cognitive'
weight <- TRUE
ses <- TRUE
if(ses) numeric_vars <- c('cohort','edu_years','wealth','log_income') ## Include outcome; will be rescaled for modelling.
if(!ses) numeric_vars <- c('cohort') ## Include outcome; will be rescaled for modelling.
factor_vars <- c('female')
all_models <- lapply(c('white','black'), model_trajectories, outcome_var, numeric_vars, factor_vars, survey_weight = weight)
## Plot underlying age trajectories of the outcome (i.e. predictions based only on random age intercepts/slopes, conditional on the rest of the model).
pdf(paste0('output/', outcome_var, '_ses', ses ,'_weight', weight, '.pdf'), height=8, width=12)
plot_data <- rbind(all_models[[1]][[2]], all_models[[2]][[2]])
white_ind_n <- length(unique(plot_data[race=='white', id]))
white_grand_n <- dim(plot_data[race=='white',])[1]
black_grand_n <- dim(plot_data[race=='black',])[1]
black_ind_n <- length(unique(plot_data[race=='black', id]))
mean_growth <- rbind(all_models[[1]][[3]], all_models[[2]][[3]])
ggplot() +
geom_line(data = plot_data,
aes(x = age,
y = growth_curve,
group = id_factor),
alpha = 0.1) +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve),
color = 'red',
size = 3) +
xlim(c(50,95)) +
ylim(c(0,27)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')')) +
theme_minimal() +
facet_wrap(~race)
ggplot() +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve,
color = race),
size = 3) +
xlim(c(50,95)) +
ylim(c(0,20)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')'),
color = 'Race') +
theme_minimal()
dev.off()
outcome_var <- 'cognitive'
weight <- TRUE
ses <- FALSE
if(ses) numeric_vars <- c('cohort','edu_years','wealth','log_income') ## Include outcome; will be rescaled for modelling.
if(!ses) numeric_vars <- c('cohort') ## Include outcome; will be rescaled for modelling.
factor_vars <- c('female')
all_models <- lapply(c('white','black'), model_trajectories, outcome_var, numeric_vars, factor_vars, survey_weight = weight)
## Plot underlying age trajectories of the outcome (i.e. predictions based only on random age intercepts/slopes, conditional on the rest of the model).
pdf(paste0('output/', outcome_var, '_ses', ses ,'_weight', weight, '.pdf'), height=8, width=12)
plot_data <- rbind(all_models[[1]][[2]], all_models[[2]][[2]])
white_ind_n <- length(unique(plot_data[race=='white', id]))
white_grand_n <- dim(plot_data[race=='white',])[1]
black_grand_n <- dim(plot_data[race=='black',])[1]
black_ind_n <- length(unique(plot_data[race=='black', id]))
mean_growth <- rbind(all_models[[1]][[3]], all_models[[2]][[3]])
ggplot() +
geom_line(data = plot_data,
aes(x = age,
y = growth_curve,
group = id_factor),
alpha = 0.1) +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve),
color = 'red',
size = 3) +
xlim(c(50,95)) +
ylim(c(0,27)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')')) +
theme_minimal() +
facet_wrap(~race)
ggplot() +
geom_line(data = mean_growth,
aes(x = age,
y= growth_curve,
color = race),
size = 3) +
xlim(c(50,95)) +
ylim(c(0,20)) +
labs(x = 'Age',
y= 'Cognition score',
title = paste0('Conditional cognition trajectories\n(White N = ',
white_grand_n, ', individuals = ', white_ind_n, ')\n(Black N = ',
black_grand_n, ', individuals = ', black_ind_n, ')'),
color = 'Race') +
theme_minimal()
dev.off()
